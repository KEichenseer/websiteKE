xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0,0,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "sample data", lty= 2)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "sample data", lty= 2)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
grad_025 <- sapply(1:length(latitude), function(f) quantile(gradient(x=latitude[f], coeff =  m[,1:5], sdy = 0), probs = 0.025))
class(m$A)
class(m)
### Calculate confidence intervals
grad_025 <- sapply(1:length(latitude), function(f) quantile(gradient(x=latitude[f], coeff =  as.matrix(m[,1:5]), sdy = 0), probs = 0.025))
grad_025
gradient(x=latitude[f], coeff =  as.matrix(m[1,1:5]), sdy = 0)
gradient(x=latitude[1], coeff =  as.matrix(m[1,1:5]), sdy = 0)
gradient(x=latitude[1], coeff =  as.matrix(m[1:2,1:5]), sdy = 0)
### Calculate confidence intervals
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0), probs = 0.025)))
### Calculate confidence intervals
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
apply(m[1:2,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0))
apply(m[1:2,1:5],1,function(a) gradient(x=latitude[1], coeff =  a, sdy = 0))
apply(m[1:3,1:5],1,function(a) gradient(x=latitude[1], coeff =  a, sdy = 0))
quantile(apply(m[1:3,1:5],1,function(a) gradient(x=latitude[1], coeff =  a, sdy = 0)),0.25
quantile(apply(m[1:3,1:5],1,function(a) gradient(x=latitude[1], coeff =  a, sdy = 0)),0.25)
quantile(apply(m[1:3,1:5],1,function(a) gradient(x=latitude[1], coeff =  a, sdy = 0)) , probs = 0.25)
quantile(apply(m[1:100,1:5],1,function(a) gradient(x=latitude[1], coeff =  a, sdy = 0)) , probs = 0.25)
### Calculate confidence intervals
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[1:10,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_025
### Calculate confidence intervals
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample((burnin+1):nIter,1000),1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_025
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
reg1_seq <- seq(min(x[phase_1]),max(x[phase_1]),length.out = 100)
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,mean), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,mean), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,mean), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty=2,
xlim = c(0,90))
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
points(latseq, gradient(x = latseq, coeff = apply(m[-1:burnin,1:5],2,mean), sd = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
burnin <- 10000
latseq <- seq(0,90,0.2)
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty=2,
xlim = c(0,90))
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
points(latseq, gradient(x = latseq, coeff = apply(m[(burnin+1):nIter,1:5],2,mean), sd = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "n", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4,30), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "gradient")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "10 draws from the posterior")
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "posterior median and 95% CI")
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "10 draws from the posterior", cex.main = 0.85)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33)))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "posterior median and 95% CI", cex.main = 0.85)
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
set.seed(10)
sample_lat <- runif(10,0,90)
sample_data <- data.frame(
x = sample_lat,
y = gradient(x = sample_lat, coeff = c(-2.2, 28, 39, 0.1, 1.2), sd = 2))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sd = 0)
plot(latitude, temperature, type = "l", lwd = 3, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "gradient", cex.main = 0.85)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "sample data", lty= 2, cex.main = 0.85)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "10 draws from the posterior", cex.main = 0.85)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33), lwd = 2))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "posterior median and 95% CI", cex.main = 0.85)
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sd = 0)
plot(latitude, temperature, type = "l", lwd = 3, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "gradient", cex.main = 1.1)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "sample data", lty= 2, cex.main = 0.85)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sd = 0)
plot(latitude, temperature, type = "l", lwd = 3, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "gradient", cex.main = 1)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "sample data", lty= 2, cex.main = 0.85)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.2)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sd = 0)
plot(latitude, temperature, type = "l", lwd = 3, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "gradient", cex.main = 1)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i",
xlim = c(0,90), main = "sample data", lty= 2, cex.main = 1)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "10 draws from the posterior", cex.main = 1)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33), lwd = 2))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "posterior median and 95% CI", cex.main = 1)
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
burnin <- 10000
latseq <- seq(0,90,0.2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
par(mar = c(4,4.25,1.25,0.75), las = 1, mgp = c(2.25,0.75,0), cex = 1.35)
latitude <- seq(0,90,by=0.5)
temperature <- gradient(x = latitude, coeff = c(-2.2, 28, 39, 0.1, 1.2), sdy = 0)
plot(latitude, temperature, type = "l", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "10 draws from the posterior", cex.main = 1)
points(sample_data$x, sample_data$y,  pch = 19, cex = 1.2, col = rgb(0,0,0,0.6), xpd = T)
replicate(10, points(latitude, gradient(x = latitude, coeff = unlist(m[sample((burnin+1):nIter,1),1:5]), sdy = 0), type = "l", col = rgb(0,0.35,0.7,0.33), lwd = 2))
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
### Calculate confidence intervals
sample_it <- sample((burnin+1):nIter,1000)
grad_025 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.025))
grad_975 <- sapply(1:length(latitude), function(f) quantile(apply(m[sample_it,1:5],1,function(a) gradient(x=latitude[f], coeff =  a, sdy = 0)), probs = 0.975))
plot(latitude, temperature, type = "n", lwd = 2, ylim = c(-4.5,32), xlab = expression ("absolute latitude ("*degree*")"), yaxt = "n", ylab = expression("temperature ("*degree~"C)"), yaxs = "i", xaxs = "i", lty = 2,
xlim = c(0,90), main = "posterior median and 95% CI", cex.main = 1)
error_polygon <- function(x,en,ep,color) {
polygon( c(x[1], x, x[length(x)], x[length(x)], rev(x), x[1]),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
error_polygon(latitude,grad_025,grad_975,rgb(0,0.35,0.7,0.33))
points(latitude, gradient(x=latitude, coeff =  apply(m[sample_it,1:5],2,median), sdy = 0), type = "l", lwd = 3, col = rgb(0,0.35,0.7,0.75))
points(latitude, temperature, type = "l", lwd = 2, lty = 2)
axis(2,seq(-5,30,5),c(NA,0,NA,10,NA,20,NA,30))
sample_data
